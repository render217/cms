// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String     @id @default(uuid())
  username     String
  email        String     @unique
  password     String
  isFirstLogin Boolean    @default(true)
  status       UserStatus @default(ACTIVE)

  Article  Article[]
  Document Document[]
  Project  Project[]

  permissions UserPermission[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserPermission {
  permissionId String
  userId       String
  user         User       @relation(fields: [userId], references: [id])
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  @@id([userId, permissionId])
}

model Permission {
  id              String           @id @default(uuid())
  permissionName  String
  action          String
  subject         String
  fields          String[]         @default([])
  conditions      String?
  user_permission UserPermission[]
}

model Article {
  id       String  @id @default(uuid())
  title    String
  content  String
  author   User?   @relation(fields: [authorId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  authorId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Document {
  id       String       @id @default(uuid())
  title    String
  type     DocumentType @default(PUBLIC)
  author   User?        @relation(fields: [authorId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  authorId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Project {
  id          String   @id @default(uuid())
  name        String
  description String
  author      User?    @relation(fields: [authorId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  authorId    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

enum DocumentType {
  CONFIDENTIAL // Represents documents that contain sensitive information
  INTERNAL // For documents meant for internal use only
  SECRET // For highly sensitive documents
  PUBLIC // For documents that can be shared publicly
}

enum UserStatus {
  ACTIVE
  DISABLED
}
